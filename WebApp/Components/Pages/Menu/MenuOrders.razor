@page "/menuorders"
@using Shared.Model
@using Shared.RestClient.Interfaces
@using System.Diagnostics
@inject IRestUnit _restUnit
<div class="d-flex flex-column mud-width-full mud-height-full">
    <MudToolBar Class="gap-4">
        <MudButton OnClick="SaveData" Variant="Variant.Filled" Color="Color.Primary">ذخیره</MudButton>
    </MudToolBar>

    <MudDropContainer ItemPicked="Picked" T="DropItem" Items="@_dropzoneItems" @ref="_container" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            @for (int i = 1; i < 3; i++)
            {
                var dropzone = i.ToString();
                <MudPaper Class="ma-4 flex-grow-1">
                    <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                        <MudListSubheader>Drop Zone @dropzone</MudListSubheader>
                        <MudDropZone T="DropItem" Identifier="@dropzone" Class="flex-grow-1" AllowReorder="true" />
                    </MudList>
                </MudPaper>
            }
        </ChildContent>
        <ItemRenderer>
            <MudListItem>
                <MudStack Row>
                    <MudAvatar>
                        <MudImage Src=@string.Format("{0},{1}","data:image/png;base64",context.Image)></MudImage>
                    </MudAvatar>
                    <MudText>@string.Format("{0} ({1})", context.Title, context.Order)</MudText>
                </MudStack>
            </MudListItem>
        </ItemRenderer>
    </MudDropContainer>
</div>
@code {
    private MudDropContainer<DropItem> _container;

    private void Picked(MudDragAndDropItemTransaction<DropItem> f)
    {
        prevIndex = f.Index;
    }
    int prevIndex = 0;
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;

        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            "2" => _dropzoneItems.Count(x => x.Selector == "1"),
            _ => 0
        };
        if (prevIndex < dropItem.IndexInZone)
        {
            foreach (var item in _dropzoneItems)
            {
                
            }
        }
        else
        {

            for (int i = dropItem.IndexInZone; i < prevIndex; i++)
            {
                _dropzoneItems.Find(x => x.Order == i).Order--;
            }

        }
        _dropzoneItems.Find(x => x.Id == dropItem.Item.Id).Order = dropItem.IndexInZone;

    }

    private List<DropItem> _dropzoneItems = new();



    private void RefreshContainer()
    {
        //update the binding to the container
        StateHasChanged();

        //the container refreshes the internal state
        _container.Refresh();
    }

    private async Task LoadServerData()
    {
        _dropzoneItems = await LoadProductCategories();
        RefreshContainer();
    }

    private async Task<List<DropItem>> LoadProductCategories()
    {
        var res = await _restUnit.Category.GetPagedList<ProductCategoryModel>("?Page=1&PageSize=50");
        return res.Items.OrderBy(x => x.Order).Select(x => new DropItem { Id = x.Id, Title = x.Title, Image = x.Image, Order = x.Order, Selector = "1" }).ToList();
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadServerData();
    }
    private async Task SaveData()
    {
        UpdateCategoryOrderParameterCollection parameters = new UpdateCategoryOrderParameterCollection
            {
                Items = _dropzoneItems.Select(x => new UpdateCategoryOrderParameter { CategoryId = x.Id, Order = x.Order }).ToList()
            };
        await _restUnit.Category.UpdateOrder(parameters);
    }


    [DebuggerDisplay("id={Id},title={Title},order={Order}")]
    public class DropItem : ProductCategoryModel
    {
        public string Selector { get; set; }
    }
}